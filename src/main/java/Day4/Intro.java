/*
반복문 - 반복 code를 줄이는 방법
여러개를 출력을 해야 할때 code를 줄여 사용 가능

for문 & while문
for문은 반복횟수가 명확 할때
while문은 반복횟수가 불명확 할때

반복문 사용 시 주의점
무한 루프 조심하기


while문
while문은 대표적 반복문으로써
while(조건식){
반복내용
}

while문을 만나게 되면 조건식을 검사하고 조건식이 참이면 반복내용을 수행,
다시 조건식 검사하는 영역으로 들어간다.

흐름이 멈추는 순간은 조건식이 거짓이 될때 반복문은 수행을 멈춤, 실행의 흐름은 while문을 탈출함

4,3,2,1을 출력하기 위함

int n= 4;
while (n>0){
//n이 0보다 크면 반복
sout(n);
n--; //n을 1식 감소
} ==> 하나의 조건문이 끝나면 다시 루프를 타고 다시 실행함


for문
for문은 가장 많이 사용 되는 반복문으로써 초기 설정 부분은 단 한번 사용되며,
조건식이 참인경우 반복내용을 수행함.
반복내용을 마치면 매번 갱신 영역을 수향한 뒤, 다시 또 조건식을 검사
조건식이 거짓이 되면 더이상 반복을 수행하지 않음

for(초기설정; 조건식; 매회 갱신){
//반복내용
}

초기설정=> 조건식 (참) => 반복내영 => 갱신 (loop를 돈다)

1,2,3,4를 출력하기 위함
for (i=0; i<5, i++) {
sout(i);
}


Break문
조건식이 참이면 연속적으로 수행함 = loop를 돈다
조건식이 거짓이 될때 까지 돈다.
조건문=>(T)=>A=>B=>C

A=>B 까지만 하고 C는 진행 하지 않기 위해서 break를 사용

Break문
if(조건식) {
//조건식이 참이면
break; // 반복문을 탈출
}

int sum =0;
for (int i = 0 ; i<=10; i++){
//수행 도중, 반복문 탈출
if (i==4){ // i가 4일때 반복문을 탈출 하고, 더이상 반복문은 수행되지 않는다.
break;
}
sum += i
}
//결과 출력
sout(sum);



Continue
while (조건식){
action A
action B
action C

A까지만 수행을 하고 다음 반복으로 넘어가고 싶을 때 = countinue
if  (조건식) { //조건식이 참이면
continue; // 다음반복으로 강제 이동
}

for (int i = 1; i <=7; i++){
//짝수는 제외
if (i %2 == 0) { // 홀수 일때 sum으로 넘어감 & 짝수일 때는 continue 문이 수행이 되고
                     sum으로 내려가지 않고 i 값만 증가되는 형태이다.
continue;
}

// i 값을 sum에 더함
sum += i ;
sout(sum)


반복문 중첩하기
반복문은 중첩해서 사용 할 수 있다

  for (int i = 0; i < 7; i++) {//출력문 하나만 두고 반복문으로 감싸준다음 7번 반복할 수 있도록 한다

          for (int col = 0; col <4; col ++) {//4번 반복
                System.out.printf("*");
            }
            System.out.println();// 줄 개행
        }

 */

